import { __assign } from "tslib";
import { isArray } from '@antv/util';
import { normalPadding } from '../../utils/padding';
import { treemap } from '../../utils/hierarchy/treemap';
import { deepAssign } from '../../utils';
export function findInteraction(interactions, interactionType) {
    if (!isArray(interactions))
        return undefined;
    return interactions.find(function (i) { return i.type === interactionType; });
}
export function enableInteraction(interactions, interactionType) {
    var interaction = findInteraction(interactions, interactionType);
    return interaction && interaction.enable !== false;
}
export function getFommatInteractions(interactions, hierarchyConfig) {
    var drillDownInteraction = findInteraction(interactions, 'treemap-drill-down');
    if (drillDownInteraction) {
        return interactions.map(function (i) {
            if (i.type === 'treemap-drill-down') {
                return deepAssign({}, i, {
                    cfg: {
                        hierarchyConfig: hierarchyConfig,
                    },
                });
            }
            return i;
        });
    }
    return interactions;
}
export function transformData(options) {
    var data = options.data, colorField = options.colorField, enableDrillDown = options.enableDrillDown, hierarchyConfig = options.hierarchyConfig;
    var nodes = treemap(data, __assign(__assign({}, hierarchyConfig), { 
        // @ts-ignore
        type: 'hierarchy.treemap', field: 'value', as: ['x', 'y'] }));
    var result = [];
    nodes.forEach(function (node) {
        if (node.depth === 0) {
            return null;
        }
        // 开启下钻，仅加载 depth === 1 的数据
        if (enableDrillDown && node.depth !== 1) {
            return null;
        }
        // 不开启下钻，加载所有叶子节点
        if (!enableDrillDown && node.children) {
            return null;
        }
        var eachNode = Object.assign({}, node.data, {
            x: node.x,
            y: node.y,
            depth: node.depth,
            value: node.value,
        });
        if (!node.data[colorField] && node.parent) {
            var ancestorNode = node.ancestors().find(function (n) { return n.data[colorField]; });
            eachNode[colorField] = ancestorNode === null || ancestorNode === void 0 ? void 0 : ancestorNode.data[colorField];
        }
        else {
            eachNode[colorField] = node.data[colorField];
        }
        result.push(eachNode);
    });
    return result;
}
export function getAdjustAppendPadding(padding) {
    var currentAppendPadding = normalPadding(padding);
    var BOTTOM = 25;
    return [currentAppendPadding[0], currentAppendPadding[1], currentAppendPadding[2] + BOTTOM, currentAppendPadding[3]];
}
//# sourceMappingURL=utils.js.map