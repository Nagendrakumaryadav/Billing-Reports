{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../../src/plots/sankey/helper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAE,2BAA2B,EAAE,MAAM,kBAAkB,CAAC;AAC/D,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AACxC,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AAGxC,MAAM,UAAU,iBAAiB,CAAC,SAAiB,EAAE,cAAsB,EAAE,KAAa;IACxF,OAAO,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC;AACtE,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,WAAmB,EAAE,gBAAwB,EAAE,MAAc;IAC/F,OAAO,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC;AAC7E,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,oBAAoB,CAAC,OAAsB,EAAE,KAAa,EAAE,MAAc;IAEtF,IAAA,IAAI,GAWF,OAAO,KAXL,EACJ,WAAW,GAUT,OAAO,YAVE,EACX,WAAW,GAST,OAAO,YATE,EACX,WAAW,GAQT,OAAO,YARE,EACX,SAAS,GAOP,OAAO,UAPA,EACT,QAAQ,GAMN,OAAO,SAND,EACR,WAAW,GAKT,OAAO,YALE,EACX,gBAAgB,GAId,OAAO,iBAJO,EAChB,SAAS,GAGP,OAAO,UAHA,EACT,cAAc,GAEZ,OAAO,eAFK,EACd,SAAS,GACP,OAAO,UADA,CACC;IAEZ,IAAM,qBAAqB,GAAG,2BAA2B,CACvD,YAAY,CAAC,IAAI,EAAE,WAAW,EAAE,WAAW,CAAC,EAC5C,WAAW,EACX,WAAW,EACX,WAAW,CACZ,CAAC;IAEF,kBAAkB;IACZ,IAAA,KAAmB,YAAY,CACnC;QACE,SAAS,WAAA;QACT,WAAW,EAAE,mBAAmB,CAAC,WAAW,EAAE,gBAAgB,EAAE,MAAM,CAAC;QACvE,SAAS,EAAE,iBAAiB,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC;QAC9D,QAAQ,UAAA;QACR,SAAS,WAAA;KACV,EACD,qBAAqB,CACtB,EATO,KAAK,WAAA,EAAE,KAAK,WASnB,CAAC;IAEF,YAAY;IACZ,OAAO;QACL,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;YACpB,OAAO;gBACL,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM,EAAE,IAAI;aACb,CAAC;QACJ,CAAC,CAAC;QACF,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;YACpB,OAAO;gBACL,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;gBACxB,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;gBACxB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI;gBAC1C,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,MAAM,EAAE,KAAK;aACd,CAAC;QACJ,CAAC,CAAC;KACH,CAAC;AACJ,CAAC","sourcesContent":["import { isRealNumber } from '../../utils/number';\nimport { transformDataToNodeLinkData } from '../../utils/data';\nimport { sankeyLayout } from './layout';\nimport { cutoffCircle } from './circle';\nimport { SankeyOptions } from './types';\n\nexport function getNodeWidthRatio(nodeWidth: number, nodeWidthRatio: number, width: number) {\n  return isRealNumber(nodeWidth) ? nodeWidth / width : nodeWidthRatio;\n}\n\nexport function getNodePaddingRatio(nodePadding: number, nodePaddingRatio: number, height: number) {\n  return isRealNumber(nodePadding) ? nodePadding / height : nodePaddingRatio;\n}\n\n/**\n * 将桑基图配置经过 layout，生成最终的 view 数据\n * @param options\n * @param width\n * @param height\n */\nexport function transformToViewsData(options: SankeyOptions, width: number, height: number) {\n  const {\n    data,\n    sourceField,\n    targetField,\n    weightField,\n    nodeAlign,\n    nodeSort,\n    nodePadding,\n    nodePaddingRatio,\n    nodeWidth,\n    nodeWidthRatio,\n    nodeDepth,\n  } = options;\n\n  const sankeyLayoutInputData = transformDataToNodeLinkData(\n    cutoffCircle(data, sourceField, targetField),\n    sourceField,\n    targetField,\n    weightField\n  );\n\n  // 3. layout 之后的数据\n  const { nodes, links } = sankeyLayout(\n    {\n      nodeAlign,\n      nodePadding: getNodePaddingRatio(nodePadding, nodePaddingRatio, height),\n      nodeWidth: getNodeWidthRatio(nodeWidth, nodeWidthRatio, width),\n      nodeSort,\n      nodeDepth,\n    },\n    sankeyLayoutInputData\n  );\n\n  // 4. 生成绘图数据\n  return {\n    nodes: nodes.map((node) => {\n      return {\n        x: node.x,\n        y: node.y,\n        name: node.name,\n        isNode: true,\n      };\n    }),\n    edges: links.map((link) => {\n      return {\n        source: link.source.name,\n        target: link.target.name,\n        name: link.source.name || link.target.name,\n        x: link.x,\n        y: link.y,\n        value: link.value,\n        isNode: false,\n      };\n    }),\n  };\n}\n"]}