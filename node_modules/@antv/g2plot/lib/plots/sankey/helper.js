"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformToViewsData = exports.getNodePaddingRatio = exports.getNodeWidthRatio = void 0;
var number_1 = require("../../utils/number");
var data_1 = require("../../utils/data");
var layout_1 = require("./layout");
var circle_1 = require("./circle");
function getNodeWidthRatio(nodeWidth, nodeWidthRatio, width) {
    return number_1.isRealNumber(nodeWidth) ? nodeWidth / width : nodeWidthRatio;
}
exports.getNodeWidthRatio = getNodeWidthRatio;
function getNodePaddingRatio(nodePadding, nodePaddingRatio, height) {
    return number_1.isRealNumber(nodePadding) ? nodePadding / height : nodePaddingRatio;
}
exports.getNodePaddingRatio = getNodePaddingRatio;
/**
 * 将桑基图配置经过 layout，生成最终的 view 数据
 * @param options
 * @param width
 * @param height
 */
function transformToViewsData(options, width, height) {
    var data = options.data, sourceField = options.sourceField, targetField = options.targetField, weightField = options.weightField, nodeAlign = options.nodeAlign, nodeSort = options.nodeSort, nodePadding = options.nodePadding, nodePaddingRatio = options.nodePaddingRatio, nodeWidth = options.nodeWidth, nodeWidthRatio = options.nodeWidthRatio, nodeDepth = options.nodeDepth;
    var sankeyLayoutInputData = data_1.transformDataToNodeLinkData(circle_1.cutoffCircle(data, sourceField, targetField), sourceField, targetField, weightField);
    // 3. layout 之后的数据
    var _a = layout_1.sankeyLayout({
        nodeAlign: nodeAlign,
        nodePadding: getNodePaddingRatio(nodePadding, nodePaddingRatio, height),
        nodeWidth: getNodeWidthRatio(nodeWidth, nodeWidthRatio, width),
        nodeSort: nodeSort,
        nodeDepth: nodeDepth,
    }, sankeyLayoutInputData), nodes = _a.nodes, links = _a.links;
    // 4. 生成绘图数据
    return {
        nodes: nodes.map(function (node) {
            return {
                x: node.x,
                y: node.y,
                name: node.name,
                isNode: true,
            };
        }),
        edges: links.map(function (link) {
            return {
                source: link.source.name,
                target: link.target.name,
                name: link.source.name || link.target.name,
                x: link.x,
                y: link.y,
                value: link.value,
                isNode: false,
            };
        }),
    };
}
exports.transformToViewsData = transformToViewsData;
//# sourceMappingURL=helper.js.map