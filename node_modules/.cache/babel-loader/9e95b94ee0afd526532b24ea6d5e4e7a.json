{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { adaptor, statistic } from './adaptor';\nimport { getLiquidData } from './utils'; // register liquid shape\n\nimport './shapes/liquid';\n/**\n * 传说中的水波图\n */\n\nvar Liquid =\n/** @class */\nfunction (_super) {\n  __extends(Liquid, _super);\n\n  function Liquid() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'liquid';\n    return _this;\n  }\n\n  Liquid.prototype.getDefaultOptions = function () {\n    return {\n      color: '#6a99f9',\n      radius: 0.9,\n      statistic: {\n        title: false,\n        content: {\n          formatter: function (_a) {\n            var percent = _a.percent;\n            return (percent * 100).toFixed(2) + \"%\";\n          },\n          style: {\n            opacity: 0.75,\n            fontSize: '30px',\n            lineHeight: '30px',\n            textAlign: 'center'\n          }\n        }\n      },\n      outline: {\n        border: 2,\n        distance: 0\n      },\n      wave: {\n        count: 3,\n        length: 192\n      },\n      shape: 'circle'\n    };\n  };\n  /**\n   * 更新数据\n   * @param percent\n   */\n\n\n  Liquid.prototype.changeData = function (percent) {\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    this.updateOption({\n      percent: percent\n    });\n    this.chart.data(getLiquidData(percent));\n    statistic({\n      chart: this.chart,\n      options: this.options\n    }, true);\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  /**\n   * 获取适配器\n   */\n\n\n  Liquid.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n\n  return Liquid;\n}(Plot);\n\nexport { Liquid };","map":{"version":3,"sources":["../../../src/plots/liquid/index.ts"],"names":[],"mappings":";AAAA,SAAS,gBAAT,EAA2B,KAA3B,QAAwC,UAAxC;AACA,SAAS,IAAT,QAAqB,iBAArB;AAGA,SAAS,OAAT,EAAkB,SAAlB,QAAmC,WAAnC;AACA,SAAS,aAAT,QAA8B,SAA9B,C,CACA;;AACA,OAAO,iBAAP;AAIA;;AAEG;;AACH,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;;AAA5B,WAAA,MAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AACE;;;AACO,IAAA,KAAA,CAAA,IAAA,GAAe,QAAf;;AAwDR;;AAtDW,EAAA,MAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;AACE,WAAO;AACL,MAAA,KAAK,EAAE,SADF;AAEL,MAAA,MAAM,EAAE,GAFH;AAGL,MAAA,SAAS,EAAE;AACT,QAAA,KAAK,EAAE,KADE;AAET,QAAA,OAAO,EAAE;AACP,UAAA,SAAS,EAAE,UAAC,EAAD,EAAY;gBAAT,OAAO,GAAA,EAAA,CAAA,O;AAAO,mBAAG,CAAC,OAAO,GAAG,GAAX,EAAgB,OAAhB,CAAwB,CAAxB,IAA0B,GAA7B;AAAgC,WADrD;AAEP,UAAA,KAAK,EAAE;AACL,YAAA,OAAO,EAAE,IADJ;AAEL,YAAA,QAAQ,EAAE,MAFL;AAGL,YAAA,UAAU,EAAE,MAHP;AAIL,YAAA,SAAS,EAAE;AAJN;AAFA;AAFA,OAHN;AAeL,MAAA,OAAO,EAAE;AACP,QAAA,MAAM,EAAE,CADD;AAEP,QAAA,QAAQ,EAAE;AAFH,OAfJ;AAmBL,MAAA,IAAI,EAAE;AACJ,QAAA,KAAK,EAAE,CADH;AAEJ,QAAA,MAAM,EAAE;AAFJ,OAnBD;AAuBL,MAAA,KAAK,EAAE;AAvBF,KAAP;AAyBD,GA1BS;AA4BV;;;AAGG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,OAAlB,EAAiC;AAC/B,SAAK,KAAL,CAAW,IAAX,CACE,gBAAgB,CAAC,kBADnB,EAEE,KAAK,CAAC,QAAN,CAAe,KAAK,KAApB,EAA2B,gBAAgB,CAAC,kBAA5C,EAAgE,IAAhE,CAFF;AAIA,SAAK,YAAL,CAAkB;AAAE,MAAA,OAAO,EAAA;AAAT,KAAlB;AAEA,SAAK,KAAL,CAAW,IAAX,CAAgB,aAAa,CAAC,OAAD,CAA7B;AACA,IAAA,SAAS,CAAC;AAAE,MAAA,KAAK,EAAE,KAAK,KAAd;AAAqB,MAAA,OAAO,EAAE,KAAK;AAAnC,KAAD,EAA+C,IAA/C,CAAT;AAEA,SAAK,KAAL,CAAW,IAAX,CACE,gBAAgB,CAAC,iBADnB,EAEE,KAAK,CAAC,QAAN,CAAe,KAAK,KAApB,EAA2B,gBAAgB,CAAC,iBAA5C,EAA+D,IAA/D,CAFF;AAID,GAdM;AAgBP;;AAEG;;;AACO,EAAA,MAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;AACE,WAAO,OAAP;AACD,GAFS;;AAGZ,SAAA,MAAA;AAAC,CA1DD,CAA4B,IAA5B,CAAA","sourcesContent":["import { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { LiquidOptions } from './types';\nimport { adaptor, statistic } from './adaptor';\nimport { getLiquidData } from './utils';\n// register liquid shape\nimport './shapes/liquid';\n\nexport { LiquidOptions };\n\n/**\n * 传说中的水波图\n */\nexport class Liquid extends Plot<LiquidOptions> {\n  /** 图表类型 */\n  public type: string = 'liquid';\n\n  protected getDefaultOptions(): Partial<LiquidOptions> {\n    return {\n      color: '#6a99f9',\n      radius: 0.9,\n      statistic: {\n        title: false,\n        content: {\n          formatter: ({ percent }) => `${(percent * 100).toFixed(2)}%`,\n          style: {\n            opacity: 0.75,\n            fontSize: '30px',\n            lineHeight: '30px',\n            textAlign: 'center',\n          },\n        },\n      },\n      outline: {\n        border: 2,\n        distance: 0,\n      },\n      wave: {\n        count: 3,\n        length: 192,\n      },\n      shape: 'circle',\n    };\n  }\n\n  /**\n   * 更新数据\n   * @param percent\n   */\n  public changeData(percent: number) {\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)\n    );\n    this.updateOption({ percent });\n\n    this.chart.data(getLiquidData(percent));\n    statistic({ chart: this.chart, options: this.options }, true);\n\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null)\n    );\n  }\n\n  /**\n   * 获取适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<LiquidOptions> {\n    return adaptor;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}